---
import Layout from "../layouts/Information.astro";
const typevar = [
    
{"type":"String",
    "Informacion":"En programación, el tipo de dato 'string' se utiliza para representar texto. Un 'string' es una secuencia de caracteres, como letras, números o símbolos, que forman palabras, frases o cualquier otro tipo de texto. ",
    "img":"asset5.jpg",
    "bg":"bg-success",
    "body1":"Las variables de tipo string se utilizan en diversas situaciones en programación para manipular y representar datos de texto",
    "body2":["Concatenación","Longitud","Extracción","Comparación"],
    "body3":"",
    "id":"1"},
    
    {"type":"Number",
    "Informacion":"El tipo de dato 'number' en programación se utiliza para representar valores numéricos. Pueden ser enteros (números sin decimales) o de punto flotante (números con decimales). ",
    "img":"asset6.jpg",
    "bg":"bg-danger",
    "body1":"Los números se utilizan en una variedad de situaciones, como realizar cálculos matemáticos, contar elementos, o representar medidas.",
    "body2":["Operaciones Arimeticas","Incremento","Decremento","Asignacion","Comparacion"],
    "body3":"",
    "id":"2"},
    
    {"type":"Boolean",
    "Informacion":"El tipo de dato 'boolean' en programación se utiliza para representar valores lógicos, es decir, solo puede tener dos posibles valores: verdadero (true) o falso (false).",
    "img":"asset7.jpg",
    "id":"3",
    "body1":"Comúnmente utilizadas en estructuras de control de flujo, como las declaraciones if (si) o los bucles (loops).",
    "body2":["Igualdad", "Negacion", "Conjuncion", "Disyuncion"],
    "body3":"",
    "bg":"bg-primary"}
]
---

<Layout title="Variables">
    <div class="container">
        <div class="seccion row m-3">
            <div class="col-5">
                <img src="../img/asset3.jpg" alt="imagen de inicio" class="w-75">
            </div>
            <div class="col-5 mt-auto mb-auto">
                <h2 class="text-center">Variables</h2>
                <p>En programación, las variables son contenedores que almacenan datos o valores manipulados por un programa.</p>
                <p>Estos valores pueden cambiar durante la ejecución del programa y permiten a los desarrolladores referirse a datos de manera simbólica en lugar de utilizar valores específicos directamente.</p>
            </div>
        </div>
        <div class="seccion2 row m-3">
            <div>
                <h2>Analogia</h2>
                <p>Las variables son como cajas donde puedes guardar información. Imagina que estás guardando números, palabras u otras cosas en estas cajas. Lo bueno es que puedes cambiar lo que hay dentro de las cajas mientras trabajas en tu programa. </p>
            </div>
        </div>
        <div class="seccion3 row m-3">
            <div class="col">
                <p>En la siguiente imagen, observamos cómo un camión está dentro de una caja. En este contexto, el "camión" actúa como nuestro objeto, mientras que la "caja" representa nuestra variable. La analogía se basa en la idea de que podemos cambiar el contenido de la caja; por ejemplo, podemos sacar el "camión" y colocar un "carro" en su lugar sin que ocurra ningún problema. Este proceso ilustra la esencia de una variable: su capacidad para variar o cambiar. La flexibilidad de poder sustituir el camión por un carro sin complicaciones refleja cómo las variables en programación permiten ajustar o modificar la información que contienen.</p>
            </div>
            <div class="col">
                <img src="../img/asset4.jpg" alt="asset4.jpg" class="rouned mx-auto d-block" style="width: 18em; height: 16em;">
            </div>
        </div>
        <div class="seccion4 row mt-4">
            <div class="head row text-center">
                <h2>Tipos de Variables</h2>
                <p class="text-info text-start">hay diferentes tipos de variables que almacenan distintos tipos de información. Estos tipos incluyen números, texto, y valores lógicos. Cada tipo tiene sus propias características y se utiliza según el tipo de datos que se quiere manejar en el programa.</p>
            </div>
            <div class="row d-flex justify-content-center">
                {typevar.map(type => (
                    <div class=`card col-3 mx-4 ${type.bg}`>
                        <img class="card-img-top mt-2" src=`../img/${type.img}` alt="">
                        <div class="card-body text-white">
                            <h3 class="card-title">{type.type}</h3>
                            <p class="card-text">{type.Informacion}</p>
                            <div class="accordion mt-auto mb-auto" id=`#accordion${type.id}`>
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target=`#CollapseOne${type.id}` aria-expanded="true" aria-controls="collapseOne" >Se utiliza en:</button>
                                    </h2>
                                    <div id=`CollapseOne${type.id}` class="accordion-collapse collapse" data-bs-parent=`#accordion${type.id}` >
                                        <div class="accordion-body">
                                                {type.body1}
                                        </div>
                                    </div>
                                </div>
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target=`#CollapseTwo${type.id}` aria-expanded="false" aria-controls="collapseTwo" >Operacios:</button>
                                    </h2>
                                    <div id=`CollapseTwo${type.id}` class="accordion-collapse collapse" data-bs-parent=`#accordion${type.id}` >
                                        <div class="accordion-body">
                                            {Array.isArray(type.body2)&& (
                                                <ul>
                                                    {type.body2.map(item => <li>{item}</li> )}
                                                </ul>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>

</Layout>